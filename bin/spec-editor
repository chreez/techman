#!/usr/bin/env bash

set -euo pipefail

# Default values
COMMAND=""
SPEC_FILE=""
DEBUG=${DEBUG:-0}
INTERACTIVE=true
AI_ASSIST=false
AI_PROMPT=""
TEMPLATE=""
VALIDATE=true
NO_BACKUP=false
VERSION_BUMP=""
CHANGELOG_MESSAGE=""
AI_CHANGELOG=false
FORK_SOURCE=""
NEW_ID=""
NEW_TITLE=""
TEST_AI=false
USE_STDIN=false

# Semantic version regex
VERSION_REGEX="^[0-9]+\.[0-9]+\.[0-9]+$"

# Model preference based on spec-validator
MODEL_PREFERENCE=("claude-3-5-sonnet-20241022" "gpt-4o-2024-08-06" "gpt-4-turbo-2024-04-09")

# Check for API keys
API_TYPE=""
if [[ -n "${ANTHROPIC_API_KEY:-}" ]]; then
    API_TYPE="anthropic"
elif [[ -n "${OPENAI_API_KEY:-}" ]]; then
    API_TYPE="openai"
fi

usage() {
    cat << 'EOF'
Usage: spec-editor <command> [OPTIONS] <spec_file>

COMMANDS:
    create          Create a new spec file
    update          Update an existing spec file
    fork            Create a new spec based on existing one
    --test-ai       Test AI integration

CREATE OPTIONS:
    --template=TYPE     Use template (service, library, cli-tool, api-endpoint)
    --ai-prompt=TEXT    Generate content from description
    --ai-assist         Use AI to enhance content
    --stdin             Read description from stdin
    --id=ID             Set spec ID
    --title=TITLE       Set spec title
    --no-validate       Skip validation before save

UPDATE OPTIONS:
    --patch             Patch version bump (x.x.X)
    --minor             Minor version bump (x.X.0)
    --major             Major version bump (X.0.0)
    --changelog=MSG     Changelog message
    --ai-changelog      Generate changelog with AI
    --ai-prompt=TEXT    AI-assisted content update
    --no-backup         Don't create backup file

FORK OPTIONS:
    --id=NEW_ID         ID for forked spec
    --title=NEW_TITLE   Title for forked spec
    --modify            Interactive modification after fork

GLOBAL OPTIONS:
    --no-interactive    Non-interactive mode
    --debug             Enable debug output
    -h, --help          Show this help message

REQUIRED:
    Either ANTHROPIC_API_KEY or OPENAI_API_KEY environment variable must be set.

EXAMPLES:
    # Interactive spec creation
    spec-editor create my-feature.md

    # Create from template
    spec-editor create --template=service --id=user-service user-service.md

    # Create with AI assistance
    echo "API rate limiter with Redis" | spec-editor create --stdin --ai-assist rate-limiter.md

    # Update with patch version
    spec-editor update --patch --changelog="Fixed typos" my-spec.md

    # Update with AI-assisted content modification
    spec-editor update --minor --ai-prompt="Add support for webhook notifications" my-spec.md

    # Fork existing spec
    spec-editor fork base-spec.md new-spec.md --id=new-feature

    # Test AI integration
    spec-editor --test-ai "user authentication system"
EOF
    exit 1
}

error() {
    echo "Error: $1" >&2
    exit 1
}

debug() {
    if [[ "$DEBUG" == "1" ]]; then
        echo "[DEBUG] $1" >&2
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        create|update|fork)
            COMMAND="$1"
            shift
            ;;
        --test-ai)
            TEST_AI=true
            AI_PROMPT="${2:-test prompt}"
            shift 2 || shift
            ;;
        -h|--help)
            usage
            ;;
        --debug)
            DEBUG=1
            shift
            ;;
        --no-interactive)
            INTERACTIVE=false
            shift
            ;;
        --template=*)
            TEMPLATE="${1#*=}"
            shift
            ;;
        --ai-prompt=*)
            AI_PROMPT="${1#*=}"
            AI_ASSIST=true
            shift
            ;;
        --ai-assist)
            AI_ASSIST=true
            shift
            ;;
        --stdin)
            USE_STDIN=true
            AI_ASSIST=true
            shift
            ;;
        --id=*)
            NEW_ID="${1#*=}"
            shift
            ;;
        --title=*)
            NEW_TITLE="${1#*=}"
            shift
            ;;
        --no-validate)
            VALIDATE=false
            shift
            ;;
        --patch)
            VERSION_BUMP="patch"
            shift
            ;;
        --minor)
            VERSION_BUMP="minor"
            shift
            ;;
        --major)
            VERSION_BUMP="major"
            shift
            ;;
        --changelog=*)
            CHANGELOG_MESSAGE="${1#*=}"
            shift
            ;;
        --ai-changelog)
            AI_CHANGELOG=true
            shift
            ;;
        --no-backup)
            NO_BACKUP=true
            shift
            ;;
        --modify)
            # Fork option
            shift
            ;;
        -*)
            error "Unknown option: $1. Use -h for help."
            ;;
        *)
            if [[ -z "$SPEC_FILE" ]]; then
                SPEC_FILE="$1"
            elif [[ "$COMMAND" == "fork" && -z "$FORK_SOURCE" ]]; then
                FORK_SOURCE="$SPEC_FILE"
                SPEC_FILE="$1"
            else
                error "Unexpected argument: $1"
            fi
            shift
            ;;
    esac
done

# Validate API key availability
if [[ -z "$API_TYPE" ]]; then
    error "Either ANTHROPIC_API_KEY or OPENAI_API_KEY environment variable must be set"
fi

# Function to call Anthropic API
call_anthropic() {
    local model="$1"
    local prompt="$2"
    local system_message="$3"
    
    # Create JSON payload using jq
    local json_payload=$(jq -n \
        --arg model "$model" \
        --arg prompt "$prompt" \
        --arg system "$system_message" \
        '{
            model: $model,
            max_tokens: 4096,
            messages: [{role: "user", content: $prompt}],
            system: $system
        }')
    
    local response=$(curl -s https://api.anthropic.com/v1/messages \
        -H "Content-Type: application/json" \
        -H "x-api-key: $ANTHROPIC_API_KEY" \
        -H "anthropic-version: 2023-06-01" \
        -d "$json_payload")
    
    # Extract the content
    echo "$response" | jq -r '.content[0].text // empty'
}

# Function to call OpenAI API
call_openai() {
    local model="$1"
    local prompt="$2"
    local system_message="$3"
    
    # Create JSON payload using jq
    local json_payload=$(jq -n \
        --arg model "$model" \
        --arg prompt "$prompt" \
        --arg system "$system_message" \
        '{
            model: $model,
            messages: [
                {role: "system", content: $system},
                {role: "user", content: $prompt}
            ],
            max_tokens: 4096
        }')
    
    local response=$(curl -s https://api.openai.com/v1/chat/completions \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -d "$json_payload")
    
    # Extract the content
    echo "$response" | jq -r '.choices[0].message.content // empty'
}

# Function to call LLM with model preference
call_llm() {
    local prompt="$1"
    local system_message="${2:-You are a helpful assistant that creates structured specification documents.}"
    
    for model in "${MODEL_PREFERENCE[@]}"; do
        debug "Trying model: $model"
        
        local result=""
        # Skip models that don't match the API type
        if [[ "$API_TYPE" == "anthropic" ]] && [[ "$model" == claude* ]]; then
            if result=$(call_anthropic "$model" "$prompt" "$system_message" 2>/dev/null) && [[ -n "$result" ]]; then
                debug "Successfully used model: $model"
                echo "$result"
                return 0
            fi
        elif [[ "$API_TYPE" == "openai" ]] && [[ "$model" == gpt* ]]; then
            if result=$(call_openai "$model" "$prompt" "$system_message" 2>/dev/null) && [[ -n "$result" ]]; then
                debug "Successfully used model: $model"
                echo "$result"
                return 0
            fi
        fi
    done
    
    debug "All models failed"
    return 1
}

# Function to prompt for input with default
prompt_input() {
    local prompt_text="$1"
    local default_value="${2:-}"
    local result=""
    
    if [[ "$INTERACTIVE" == "true" ]]; then
        if [[ -n "$default_value" ]]; then
            read -p "$prompt_text [$default_value]: " result
            result="${result:-$default_value}"
        else
            read -p "$prompt_text: " result
        fi
    else
        result="$default_value"
    fi
    
    echo "$result"
}

# Function to get timestamp
get_timestamp() {
    date -u +%Y-%m-%d
}

# Function to increment version
increment_version() {
    local version="$1"
    local bump_type="$2"
    
    # Parse version
    if [[ ! "$version" =~ $VERSION_REGEX ]]; then
        error "Invalid version format: $version"
    fi
    
    local major=$(echo "$version" | cut -d. -f1)
    local minor=$(echo "$version" | cut -d. -f2)
    local patch=$(echo "$version" | cut -d. -f3)
    
    case "$bump_type" in
        patch)
            patch=$((patch + 1))
            ;;
        minor)
            minor=$((minor + 1))
            patch=0
            ;;
        major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
        *)
            error "Invalid bump type: $bump_type"
            ;;
    esac
    
    echo "$major.$minor.$patch"
}

# Function to parse frontmatter
parse_frontmatter() {
    local file="$1"
    local field="$2"
    
    # Extract frontmatter and get field value
    awk -v field="$field" '
        /^---$/ { if (++count == 2) exit }
        count == 1 && $1 == field":" { 
            sub(/^[^:]+:[ ]*/, "")
            print
            exit
        }
    ' "$file"
}

# Function to validate spec using spec-validator
validate_spec() {
    local spec_file="$1"
    local validator_path=""
    
    # Find spec-validator
    if [[ -x "./bin/spec-validator" ]]; then
        validator_path="./bin/spec-validator"
    elif [[ -x "$(dirname "$0")/spec-validator" ]]; then
        validator_path="$(dirname "$0")/spec-validator"
    else
        debug "spec-validator not found, skipping validation"
        return 0
    fi
    
    # Run validation
    if "$validator_path" "$spec_file" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Function to create backup
create_backup() {
    local file="$1"
    if [[ "$NO_BACKUP" == "false" ]] && [[ -f "$file" ]]; then
        cp "$file" "${file}.bak"
        debug "Created backup: ${file}.bak"
    fi
}

# Function to generate AI content for required fields
generate_ai_fields() {
    local title="$1"
    local spec_id="$2"
    local prompt="${3:-$title}"
    
    # Generate description
    local desc_prompt="Generate a concise 1-2 sentence description for a specification about: $prompt. Focus on the core functionality and purpose. Output only the description text, no quotes or extra formatting."
    local description=$(call_llm "$desc_prompt" "You are a technical specification writer.")
    
    # Generate entry points based on the spec type
    local entry_prompt="For a specification titled '$title' with ID '$spec_id', generate appropriate entry_points. If it's a CLI tool, use 'bin/$spec_id'. If it's a library, use 'src/$spec_id' or 'lib/$spec_id'. If it's a service, use 'services/$spec_id'. Output only the entry point path, no quotes or extra formatting."
    local entry_points=$(call_llm "$entry_prompt" "You are a technical specification writer.")
    
    # Return as JSON-like structure for easy parsing
    cat <<EOF
{
  "description": "$description",
  "entry_points": "$entry_points"
}
EOF
}

# Handle test AI command
if [[ "$TEST_AI" == "true" ]]; then
    echo "[SPEC EDITOR] Testing AI integration"
    echo "API Type: $API_TYPE"
    echo "Test prompt: $AI_PROMPT"
    echo
    
    system_msg="You are a helpful assistant. Generate a brief 2-3 sentence description of a software specification for: $AI_PROMPT"
    
    echo "Testing AI response..."
    result=$(call_llm "$AI_PROMPT" "$system_msg")
    
    echo "Status: SUCCESS"
    echo "Response Length: $(echo "$result" | wc -c) characters"
    echo
    echo "AI Response:"
    echo "------------"
    echo "$result"
    echo "------------"
    exit 0
fi

# Handle create command
if [[ "$COMMAND" == "create" ]]; then
    if [[ -z "$SPEC_FILE" ]]; then
        error "Spec file path is required for create command"
    fi
    
    if [[ -f "$SPEC_FILE" ]]; then
        error "File already exists: $SPEC_FILE"
    fi
    
    echo "[SPEC EDITOR] Creating new spec: $SPEC_FILE"
    echo
    
    # Get input description if using stdin
    if [[ "$USE_STDIN" == "true" ]]; then
        AI_PROMPT=$(cat)
    fi
    
    # Collect spec information
    if [[ -n "$NEW_ID" ]]; then
        spec_id="$NEW_ID"
    else
        spec_id=$(prompt_input "Enter spec ID (lowercase-hyphenated)" "$(basename "$SPEC_FILE" .md)")
    fi
    
    if [[ -n "$NEW_TITLE" ]]; then
        title="$NEW_TITLE"
    else
        title=$(prompt_input "Enter title" "")
    fi
    
    version=$(prompt_input "Enter initial version" "0.1.0")
    
    # Generate AI fields if in non-interactive mode with AI assist
    if [[ "$INTERACTIVE" == "false" ]] && [[ "$AI_ASSIST" == "true" ]]; then
        debug "Generating AI content for required fields"
        ai_fields=$(generate_ai_fields "$title" "$spec_id" "$AI_PROMPT")
        description=$(echo "$ai_fields" | jq -r '.description // empty')
        entry_points=$(echo "$ai_fields" | jq -r '.entry_points // empty')
        
        # Fallback to defaults if AI fails
        if [[ -z "$description" ]]; then
            description="Specification for $title"
        fi
        if [[ -z "$entry_points" ]]; then
            entry_points="bin/$spec_id"
        fi
        
        status="draft"
    else
        # Interactive mode or manual mode
        if [[ "$AI_ASSIST" == "true" ]] && [[ -n "$AI_PROMPT" ]]; then
            echo "Generating description with AI..."
            ai_system="You are a technical specification writer. Generate a concise description (1-2 sentences) for a specification about: $AI_PROMPT. Focus on the core functionality and purpose."
            description=$(call_llm "$AI_PROMPT" "$ai_system")
        else
            description=$(prompt_input "Enter description" "")
        fi
        
        entry_points=$(prompt_input "Enter entry points (comma-separated)" "")
        
        if [[ "$INTERACTIVE" == "true" ]]; then
            echo
            echo "Select status:"
            echo "1) draft (new/experimental)"
            echo "2) active (in production)"
            echo "3) deprecated (being phased out)"
            status_choice=$(prompt_input "Choice" "1")
            
            case "$status_choice" in
                1) status="draft" ;;
                2) status="active" ;;
                3) status="deprecated" ;;
                *) status="draft" ;;
            esac
        else
            status="draft"
        fi
    fi
    
    # Create initial spec content
    spec_content="---
id: $spec_id
version: $version
title: $title
status: $status
entry_points:
  - $entry_points
description: >
  $description
---

## 🧠 Goal

[Describe the main purpose and objective of this specification]

## ⚙️ Functionality

[List the key features and capabilities]

## ✅ Success Criteria

[Define measurable success criteria]

## 🔐 Security

[Document security considerations if applicable]

## 🧪 Test Strategy

[Define testing approach and coverage requirements]

## 🛠️ Implementation Notes

[Include technical details and guidance]

## 📝 Example Usage

[Provide concrete examples of how this spec is used]

## 🔁 Changelog

- **$version** — $(get_timestamp) — Initial specification
"

    # AI enhancement if requested
    if [[ "$AI_ASSIST" == "true" ]] && [[ -n "$AI_PROMPT" ]]; then
        echo "Enhancing spec with AI..."
        
        # Create a more detailed prompt for full spec generation
        ai_enhance_prompt="Given this spec template for '$title':

$spec_content

Please enhance this specification with detailed, relevant content based on the description: $AI_PROMPT

Requirements:
- Keep the exact same structure and section headers
- Replace placeholder text in brackets with actual content
- Write specific, actionable content for each section
- Goal: Clear statement of what this spec aims to achieve
- Functionality: Detailed list of features and capabilities
- Success Criteria: Measurable outcomes
- Test Strategy: Appropriate testing approach
Respond with the complete enhanced specification document."
        
        enhanced_content=$(call_llm "$ai_enhance_prompt" "You are a technical specification writer. Enhance the provided template with relevant, specific content while maintaining the exact structure and formatting.")
        
        if [[ -n "$enhanced_content" ]]; then
            spec_content="$enhanced_content"
        fi
    fi
    
    # Write the file
    echo "$spec_content" > "$SPEC_FILE"
    
    # Validate if requested
    if [[ "$VALIDATE" == "true" ]]; then
        if validate_spec "$SPEC_FILE"; then
            echo "Spec created successfully! Validation passed."
        else
            echo "Warning: Spec created but validation failed. Run 'spec-validator $SPEC_FILE' to see issues."
        fi
    else
        echo "Spec created successfully!"
    fi
fi

# Handle update command
if [[ "$COMMAND" == "update" ]]; then
    if [[ -z "$SPEC_FILE" ]]; then
        error "Spec file path is required for update command"
    fi
    
    if [[ ! -f "$SPEC_FILE" ]]; then
        error "Spec file not found: $SPEC_FILE"
    fi
    
    echo "[SPEC EDITOR] Updating: $SPEC_FILE"
    
    # Create backup
    create_backup "$SPEC_FILE"
    
    # Parse current version
    current_version=$(parse_frontmatter "$SPEC_FILE" "version")
    if [[ -z "$current_version" ]]; then
        error "Could not find version in spec file"
    fi
    
    echo "Current version: $current_version"
    
    # Determine version bump
    if [[ -z "$VERSION_BUMP" ]] && [[ "$INTERACTIVE" == "true" ]]; then
        echo
        echo "What type of change?"
        echo "1) Patch (typo/clarification)"
        echo "2) Minor (new feature/backwards compatible)"
        echo "3) Major (breaking change)"
        bump_choice=$(prompt_input "Choice" "1")
        
        case "$bump_choice" in
            1) VERSION_BUMP="patch" ;;
            2) VERSION_BUMP="minor" ;;
            3) VERSION_BUMP="major" ;;
            *) VERSION_BUMP="patch" ;;
        esac
    elif [[ -z "$VERSION_BUMP" ]]; then
        VERSION_BUMP="patch"
    fi
    
    # Calculate new version
    new_version=$(increment_version "$current_version" "$VERSION_BUMP")
    echo "New version: $new_version"
    
    # Handle AI-assisted content update
    if [[ "$AI_ASSIST" == "true" ]] && [[ -n "$AI_PROMPT" ]]; then
        echo "Applying AI-assisted content update..."
        
        # Read current spec content
        current_content=$(cat "$SPEC_FILE")
        
        # Create update prompt
        update_prompt="Given this specification document:

$current_content

Apply the following change: $AI_PROMPT

Requirements:
- Maintain the exact structure and formatting
- Update relevant sections based on the requested change
- Preserve all existing content that isn't directly affected
- Add new content where appropriate
- Do not modify the frontmatter (YAML between ---) except for version
- Ensure the document remains valid according to spec format

Respond with the complete updated specification document."

        # Get AI response
        updated_content=$(call_llm "$update_prompt" "You are a technical specification editor. Update the provided specification based on the requested changes while preserving structure and existing content.")
        
        if [[ -n "$updated_content" ]]; then
            # Save the AI-updated content
            echo "$updated_content" > "$SPEC_FILE"
            
            # Update version in the file
            sed -i.tmp "s/^version: .*/version: $new_version/" "$SPEC_FILE"
            rm -f "${SPEC_FILE}.tmp"
            
            # Generate changelog message if not provided
            if [[ -z "$CHANGELOG_MESSAGE" ]]; then
                CHANGELOG_MESSAGE="$AI_PROMPT"
            fi
        else
            error "AI content update failed"
        fi
    else
        # Manual update - just update version
        sed -i.tmp "s/^version: .*/version: $new_version/" "$SPEC_FILE"
        rm -f "${SPEC_FILE}.tmp"
    fi
    
    # Get changelog message
    if [[ -z "$CHANGELOG_MESSAGE" ]] && [[ "$AI_CHANGELOG" == "true" ]]; then
        echo "Generating changelog with AI..."
        # Read git diff if available
        if command -v git >/dev/null 2>&1 && git rev-parse --git-dir >/dev/null 2>&1; then
            diff_content=$(git diff "$SPEC_FILE" 2>/dev/null || echo "")
            changelog_prompt="Based on these changes, write a brief changelog entry: $diff_content"
        else
            changelog_prompt="Write a brief changelog entry for a $VERSION_BUMP version update"
        fi
        
        CHANGELOG_MESSAGE=$(call_llm "$changelog_prompt" "You are a technical writer. Generate a concise, clear changelog entry.")
    elif [[ -z "$CHANGELOG_MESSAGE" ]]; then
        CHANGELOG_MESSAGE=$(prompt_input "Describe your change for the changelog" "")
    fi
    
    # Add changelog entry
    timestamp=$(get_timestamp)
    new_changelog_entry="- **$new_version** — $timestamp — $CHANGELOG_MESSAGE"
    
    # Find changelog section and add entry
    awk -v entry="$new_changelog_entry" '
        /^## 🔁 Changelog/ || /^## Changelog/ { 
            print
            print ""
            print entry
            next
        }
        { print }
    ' "$SPEC_FILE" > "${SPEC_FILE}.tmp" && mv "${SPEC_FILE}.tmp" "$SPEC_FILE"
    
    echo
    echo "Summary of changes:"
    echo "- Version: $current_version → $new_version"
    echo "- New changelog entry"
    if [[ "$AI_ASSIST" == "true" ]] && [[ -n "$AI_PROMPT" ]]; then
        echo "- AI-assisted content update applied"
    fi
    
    # Validate if requested
    if [[ "$VALIDATE" == "true" ]]; then
        if validate_spec "$SPEC_FILE"; then
            echo "Updated successfully! Validation passed."
        else
            echo "Warning: Updated but validation failed. Run 'spec-validator $SPEC_FILE' to see issues."
        fi
    else
        echo "Updated successfully!"
    fi
fi

# Handle fork command
if [[ "$COMMAND" == "fork" ]]; then
    if [[ -z "$FORK_SOURCE" ]] || [[ -z "$SPEC_FILE" ]]; then
        error "Fork requires source and destination files: spec-editor fork <source> <destination>"
    fi
    
    if [[ ! -f "$FORK_SOURCE" ]]; then
        error "Source spec not found: $FORK_SOURCE"
    fi
    
    if [[ -f "$SPEC_FILE" ]]; then
        error "Destination already exists: $SPEC_FILE"
    fi
    
    echo "[SPEC EDITOR] Forking: $FORK_SOURCE → $SPEC_FILE"
    
    # Copy the source file
    cp "$FORK_SOURCE" "$SPEC_FILE"
    
    # Update ID and title
    if [[ -n "$NEW_ID" ]]; then
        sed -i.tmp "s/^id: .*/id: $NEW_ID/" "$SPEC_FILE"
    fi
    
    if [[ -n "$NEW_TITLE" ]]; then
        sed -i.tmp "s/^title: .*/title: $NEW_TITLE/" "$SPEC_FILE"
    fi
    
    # Reset version
    sed -i.tmp "s/^version: .*/version: 0.1.0/" "$SPEC_FILE"
    
    # Update changelog
    timestamp=$(get_timestamp)
    new_changelog="## 🔁 Changelog\n\n- **0.1.0** — $timestamp — Forked from $(basename "$FORK_SOURCE")"
    
    # Replace changelog section
    awk -v new_log="$new_changelog" '
        /^## 🔁 Changelog/ || /^## Changelog/ { 
            print new_log
            in_changelog = 1
            next
        }
        /^## / && in_changelog { in_changelog = 0 }
        !in_changelog { print }
    ' "$SPEC_FILE" > "${SPEC_FILE}.tmp" && mv "${SPEC_FILE}.tmp" "$SPEC_FILE"
    
    # Clean up temp files
    rm -f "${SPEC_FILE}.tmp"
    
    echo "Fork created successfully!"
fi

# If no command specified
if [[ -z "$COMMAND" ]] && [[ "$TEST_AI" == "false" ]]; then
    error "No command specified. Use -h for help."
fi